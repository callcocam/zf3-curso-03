<?php
/**
 * Created by PhpStorm.
 * User: Call
 * Date: 17/08/2016
 * Time: 10:21
 */

namespace Base\Form;


use Auth\Model\Users\AuthRepository;
use Base\Model\Cache;
use Base\Services\Client;
use Interop\Container\ContainerInterface;
use Make\Model\Table;
use Zend\Debug\Debug;
use Zend\Form\Form;

class AbstractForm extends Form {
    /**
     * @var ContainerInterface
     */
    protected  $containerInterface;
    /**
     * @var $cache Cache
     */
    protected $cache;
    protected $config;

    /**
     * @param ContainerInterface $containerInterface
     * @param null $name
     * @param array $options
     */
    public function __construct(ContainerInterface $containerInterface,$name = null, $options = [])
    {
        parent::__construct($name, $options); // TODO: Change the autogenerated stub
        $this->containerInterface = $containerInterface;
        $this->setAttribute('class','form-horizontal');
        $this->cache=$containerInterface->get(Cache::class);
        $this->config=$containerInterface->get("ZfConfig");
    }

    /**
     * @param $id
     */
    public function setId($id=[])
    {
        $this->add(array_replace([
            'type'=>'hidden',
            'name'=>'id',
            'options'=>[],
            'attributes'=>[
                'id'=>'id',
                'value'=>'AUTOMATICO',
                'data-position' => 'geral',
            ]
        ], $id));
    }

    /**
     * @param array $empresa
     */
    public function setEmpresa($empresa=[])
    {
        $this->add(array_replace([
            'type'=>'hidden',
            'name'=>'empresa',
            'options'=>[],
            'attributes'=>[
                'id'=>'empresa',
                'value' => '',
                'data-access' => '3',
                'data-position' => 'geral',
            ]
        ],$empresa));
    }

    /**
     * @param array $codigo
     */
    public function setCodigo($codigo=[])
    {
        $this->add(array_replace([
            'type'=>'hidden',
            'name'=>'codigo',
            'options'=>[],
            'attributes'=>[
                'id'=>'codigo',
                'value'=>'8',
                'data-position' => 'geral'
            ]
        ],$codigo));
    }

    /**
     * @param array $assetid
     */
    public function setAssetid($assetid=[])
    {
        $this->add(array_replace([
            'type'=>'hidden',
            'name'=>'asset_id',
            'options'=>[],
            'attributes'=>[
                'id'=>'asset_id',
                'id' => 'asset_id',
                'value' =>'1',//isset($this->authservice['empresa'])? md5($this->authservice['empresa']):'1',
                'data-access' => '3',
                'data-position' => 'geral',
            ]
        ],$assetid));
    }

    /**
     * @param mixed $description
     */
    public function setDescription($description=[])
    {
        $this->add(array_replace([
                'type' => 'textarea',
                'name' => 'description',
                'options' => [
                    'label' => 'FILD_DESCRIPTION_LABEL',
                    'label_attributes' => ['class' => 'control-label','for'=>'description']
                ],
                'attributes' => [
                    'id' => 'description',
                    'title' => 'FILD_DESCRIPTION_DESC',
                    'class' => 'form-control',
                    'placeholder' => 'FILD_DESCRIPTION_PLACEHOLDER',
                    'rows' => '5',
                    'cols' => '20',
                    'data-access' => '3',
                    'data-position' => 'geral',
                ],
            ]
            ,$description));
    }
    /**
     * @param array $access
     */
    public function setAccess($access=[])
    {
        $this->add(array_replace([
            'type'=>'select',
            'name'=>'access',
            'options'=>[
                'label' => 'FILD_ACCESS_LABEL',
                "disable_inarray_validator" => true,
                'label_attributes' => ['class' => 'control-label','for'=>'access'],
                'value_options'=>$this->setValueOption(AuthRepository::class),

            ],
            'attributes'=>[
                'id' => 'access',
                'title' => 'FILD_ACCESS_DESC',
                'class' => 'form-control',
                'placeholder' => 'FILD_ACCESS_PLACEHOLDER',
                'data-access' => '3',
                'value'=>'3',
                'data-position' => 'datas',

            ]
        ],$access));
    }

    /**
     * @param mixed $state
     */
    public function setState($state=[])
    {
        $this->add(array_replace([
            'type'=>'select',
            'name'=>'state',
            'options'=>[
                'label' => 'FILD_STATE_LABEL',
                "disable_inarray_validator" => true,
                'label_attributes' => ['class' => 'control-label','for'=>'state'],
                'value_options'=>[0=>'PUBLICADO/HABILITADO',1=>'ARQUIVADO/DESABILITADO']

            ],
            'attributes'=>[
                'id' => 'state',
                'title' => 'FILD_STATE_DESC',
                'class' => 'form-control',
                'placeholder' => 'FILD_STATE_PLACEHOLDER',
                'data-access' => '3',
                'data-position' => 'datas',
            ]
        ],$state));
    }
    /**
     * @param array $created
     */
    public function setCreated($created=[])
    {
        $this->add(array_replace([
            'type'=>'text',
            'name'=>'created',
            'options'=>[
                'label' => 'FILD_CREATED_LABEL',
                'label_attributes' => ['class' => 'control-label','for'=>'created']
            ],
            'attributes'=>[
                'id' => 'created',
                'title' => 'FILD_CREATED_DESC',
                'class' => 'form-control',
                'placeholder' => 'FILD_CREATED_PLACEHOLDER',
                'readonly' => true,
                'value'=>date("Y-m-d"),
                'data-access' => '3',
                'data-position' => 'datas',

            ]
        ],$created));
    }



    /**
     * @param array $modified
     */
    public function setModified($modified=[])
    {
        $this->add(array_replace([
            'type'=>'text',
            'name'=>'modified',
            'options'=>[
                'label' => 'FILD_MODIFIED_LABEL',
                'label_attributes' => ['class' => 'control-label','for'=>'modified']
            ],
            'attributes'=>[
                'id'=>'modified',
                'title' => 'FILD_MODIFIED_DESC',
                'class' => 'form-control',
                'placeholder' => 'FILD_MODIFIED_PLACEHOLDER',
                'value'=>date("d-m-Y"),
                'data-access' => '3',
                'data-position' => 'datas',
            ]
        ],$modified));
    }

    public function setSave($save=[])
    {
        $this->add(array_replace([
            'name' => 'save',
            'type' => 'button',
            'attributes' => ['type' => 'submit','class'=>'btn btn-primary'],
            'options' => [
                'label' => 'BTN_SAVE_LABEL',
                'column-size' => 'sm-12',
                'add-on-append'=>'floppy-o']
        ],$save));
    }

    public function setSaveCopy($save=[])
    {
        $this->add(array_replace([
            'name' => 'save_copy',
            'type' => 'button',
            'attributes' => ['type' => 'submit','class'=>'btn btn-warning'],
            'options' => [
                'label' => 'BTN_SAVE_COPY_LABEL',
                'column-size' => 'sm-12',
                'add-on-append'=>'copy']
        ],$save));
    }


    /**
     * @param mixed $csrf
     */
    public function setCsrf($csrf)
    {
        $this->add(array_replace([
            'type' => 'Zend\Form\Element\Csrf',
            'name' => 'security',
            'options' => [
                'csrf_options' =>[
                    'timeout' => 600
                ]
            ], 'attributes' => [
                'data-access' => '3',
                'data-position' => 'geral',
            ]
        ],$csrf));
    }


    /**
     * @param mixed $atachament
     */
    public function setAtachament($atachament)
    {

        $this->add(array_replace([
                'type' => 'file',
                'name' => 'images',
                'options' => [
                    'label' => 'FILD_IMAGES_LABEL',
                    'add-on-append'=>'picture',
                    'label_attributes' => ['class' => 'control-label','for'=>'modified']
                ],
                'attributes' => [
                    'id' => 'images',
                    'title' => 'FILD_IMAGES_DESC',
                    'class' => 'images',
                    'data-access' => '3',
                    'readonly' => true,
                    'data-position' => 'controller',
                ],
            ]
            ,$atachament));
    }

    /**
     * @param $captha
     */
    public function setCaptha($captha){

        $this->add(array_replace([
                'type' => 'Zend\Form\Element\Captcha',
                'name' => 'captcha',
                'options' => [
                    'label' => 'Please verify you are human.',
                    'captcha' => [
                        'class'   => 'Image',
                        'options' => [
                            'font' =>  './data/arial.ttf',
                            'width' => 200,
                            'height' => 100,
                            'dotNoiseLevel' => 40,
                            'lineNoiseLevel' => 3,
                            'wordLen' => 3,
                            'imgDir' => './public/images/captcha/generated',
                            'imgUrl' => '/images/captcha/generated'
                        ],
                    ],
                ],
                'attributes' => [
                    'id' => 'captcha',
                    'title' => 'FILD_CAPTHA_DESC',
                    'class' => 'form-control',
                    'data-access' => '3',
                    'data-position' => 'geral',
                ]
            ]
            ,$captha));
    }

    public function setValueOption($table,$condicao=null,$index="id",$value="title"){
        $repository=$this->containerInterface->get($table)->select($condicao);
        $options=[''=>'-SELECIONE-'];
        if($repository->getResult())
        {
            foreach($repository->getData() as $obj){
                $array=$obj->toArray();
                $options[$array[$index]]=$array[$value];
            }
        }

        return $options;
    }

    /**
     * @return uma lista com os nomes dos modules do sistema
     */
    public function get_parent_module(){
        return $this->containerInterface->get('ZfConfig')->modules->toArray();
    }

    /**
     * @return uma lista com os nomes dos modules do sistema
     */
    public function get_grupo(){
        return $this->containerInterface->get('ZfConfig')->grupos->toArray();
    }

    /**
     * @return uma lista com os nomes das tabelas do banco
     */
    public function getTableName() {
        /**
         * @var $table Table
         */
        $table = $this->containerInterface->get(Table::class);
        return $table->getTablenames();
    }

    public function setCidade()
    {
        if ($this->has('cidade')):
            if($this->get('cidade')->getAttribute('type')=="select"):
                if($this->cache->hasItem('cidade')){
                    $cidades=$this->cache->getItem('cidade');
                    $arraycidades=[''=>'-SELECIONE-'];
                    foreach($cidades as $cidade):
                        $arraycidades[$cidade['id']]=$cidade['title'];
                    endforeach;
                }
                else{
                    /**
                     * @var $client ClientHttp
                     */
                    $client = $this->containerInterface->get(Client::class);
                    $client->setUri(sprintf("%s/%s",$this->config->serverHost,'cidades'));
                    $response = $client->send();
                    if ($response->isSuccess()) {
                        $data=json_decode($response->getBody(),true);
                        $arraycidades=[];
                        $cidadeCache=[];
                        foreach($data['data'] as $o){
                            $arraycidades[$o['id']]=$o['title'];
                            $cidadeCache[$o['id']]=$o;
                        }
                        $this->cache->addItem('cidade',$cidadeCache);
                    }
                }

                $this->get('cidade')->setOptions(['value_options' => $arraycidades]);
            else:
                $this->get('cidade')->setValue('1');
            endif;
        endif;
    }

}